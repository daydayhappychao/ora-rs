import { Options, PersistOptions, PromiseOptions, Spinner } from './type';
declare class Ora {
    #private;
    private readonly binding;
    color: import("./type").Color | undefined;
    constructor(options: Options);
    get indent(): number | undefined;
    set indent(indent: number | undefined);
    get interval(): number;
    get spinner(): Spinner;
    set spinner(spinner: Options['spinner']);
    get text(): string | undefined;
    set text(value: string | undefined);
    get prefixText(): Options['prefixText'];
    set prefixText(value: Options['prefixText']);
    get suffixText(): Options['suffixText'];
    set suffixText(value: Options['suffixText']);
    get isSpinning(): boolean;
    get isEnabled(): boolean;
    set isEnabled(value: boolean);
    get isSilent(): boolean;
    set isSilent(value: boolean);
    clear(): this;
    start(text?: string): this;
    stop(): this;
    succeed(text?: string): this;
    fail(text?: string): this;
    warn(text?: string): this;
    info(text?: string): this;
    stopAndPersist(options?: PersistOptions): this;
}
export default function ora(options: Options): Ora;
export declare function oraPromise<T>(action: Promise<T> | ((spinner: Ora) => Promise<T>), options: PromiseOptions<T>): Promise<T>;
export { default as spinners } from 'cli-spinners';
